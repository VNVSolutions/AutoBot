import telebot
import string
import os
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot import types
from django.utils import timezone
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.conf import settings
from django.core.files.storage import FileSystemStorage
from django.core.files import File
from django.dispatch import receiver
from django.db.models import Q
from django.db.models.signals import post_save
from datetime import datetime
from itertools import zip_longest
from .models import UserProfile
from .models import Product
from .models import Order
from .models import Preference
from .models import Question
from .models import Contacts
from .models import ContactsLink
from .conf import bot


@csrf_exempt
def telegram_webhook(request):
    if request.method == 'POST':
        update = telebot.types.Update.de_json(request.body.decode('utf-8'))
        bot.process_new_updates([update])
        return HttpResponse('')
    return HttpResponse('Invalid request method')


@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    first_name = message.chat.first_name
    name = message.chat.username
    try:
        user = UserProfile.objects.get(telegram_id=chat_id)
        clear_user_context(chat_id)
        bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é", reply_markup=create_reply_markup())
    except UserProfile.DoesNotExist:
        user = UserProfile.objects.create(telegram_id=chat_id, username=first_name, name=name)
        clear_user_context(chat_id)
        bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é", reply_markup=create_reply_markup())


def create_reply_markup():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(KeyboardButton('üõû –û–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ –ø–æ—Å–ª—É–≥–æ—é'), KeyboardButton('–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É ‚úÖ'))
    markup.add(KeyboardButton('üìÑ –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å üìÑ'))
    markup.add(KeyboardButton('ü•á –ü–µ—Ä–µ–≤–∞–≥–∏'), KeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç–∏ üì≤'))
    markup.add(KeyboardButton('üë©‚Äçüíª –ó–≤\'—è–∑–∞—Ç–∏—Å—å –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º üë©‚Äçüíª'))
    print("–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é markup")
    print(markup)
    return markup


user_context = {}


@bot.message_handler(func=lambda message: message.text == "üõû –û–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ –ø–æ—Å–ª—É–≥–æ—é")
def display_services(message):
    chat_id = message.chat.id
    products = Product.objects.all()
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    for product in products:
        markup.add(KeyboardButton(product.name))
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —è–∫–∞ –ø–æ—Å–ª—É–≥–∞ —Ü—ñ–∫–∞–≤–∏—Ç—å", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É ‚úÖ")
def order_service(message):
    chat_id = message.chat.id
    user_context[chat_id] = {'step': 'order_service'}
    products = Product.objects.all()
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    for product in products:
        markup.add(KeyboardButton(product.name))
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —è–∫–∞ –ø–æ—Å–ª—É–≥–∞ —Ü—ñ–∫–∞–≤–∏—Ç—å", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–ó–∞–º–æ–≤–∏—Ç–∏ ‚úÖ")
def start_order(message):
    chat_id = message.chat.id
    if chat_id in user_context:
        product = user_context[chat_id]['product']
        if product:
            user_context[chat_id]['product'] = product
            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            markup.add(KeyboardButton("–ó–∞–º–æ–≤–∏—Ç–∏ –Ω–µ–≥–∞–π–Ω–æ"))
            markup.add(KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç–∏ –¥–∞—Ç—É"))
            bot.send_message(chat_id, "–í–∫–∞–∂—ñ—Ç—å –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø–æ—Å–ª—É–≥–∞", reply_markup=markup)
        else:
            bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞: –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
    else:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞: –î–ª—è –ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É.")


@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥ üîô")
def go_back(message):
    chat_id = message.chat.id
    clear_user_context(chat_id)
    bot.send_message(chat_id, "–ú–µ–Ω—é", reply_markup=create_reply_markup())


@bot.message_handler(func=lambda message: message.text in [product.name for product in Product.objects.all()])
def choose_product(message):
    chat_id = message.chat.id
    text = message.text
    product = Product.objects.get(name=text)
    if product:
        if chat_id in user_context:
            user_context[chat_id]['product'] = product
            user_context[chat_id]['step'] = 'order_service'
            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            markup.add(KeyboardButton("–ó–∞–º–æ–≤–∏—Ç–∏ –Ω–µ–≥–∞–π–Ω–æ"))
            markup.add(KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç–∏ –¥–∞—Ç—É"))
            bot.send_message(chat_id, "–í–∫–∞–∂—ñ—Ç—å –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø–æ—Å–ª—É–≥–∞", reply_markup=markup)
        else:
            user_context[chat_id] = {'product': product, 'step': 'order_service'}
            question = product.question
            bot.send_message(chat_id, question)
            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            markup.add(KeyboardButton("–ó–∞–º–æ–≤–∏—Ç–∏ ‚úÖ"))
            markup.add(KeyboardButton("–ù–∞–∑–∞–¥ üîô"))
            bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —è–∫–∞ –ø–æ—Å–ª—É–≥–∞ —Ü—ñ–∫–∞–≤–∏—Ç—å", reply_markup=markup)
    else:
        bot.send_message(chat_id, "–ü–æ—Å–ª—É–≥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É.")


@bot.message_handler(func=lambda message: message.text == "–ù–∞–ø–∏—Å–∞—Ç–∏ –¥–∞—Ç—É")
def write_date(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: –°—å–æ–≥–æ–¥–Ω—ñ 14:00")
    bot.register_next_step_handler(message, lambda msg: save_order_data(msg, user_context[chat_id]['product']))


@bot.message_handler(func=lambda message: message.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –Ω–µ–≥–∞–π–Ω–æ")
def order_immediately(message):
    save_order_data(message, "–ù–µ–≥–∞–π–Ω–æ")


def save_order_data(message, date):
    chat_id = message.chat.id
    user_input = message.text
    product = user_context[chat_id]['product']
    try:
        user = UserProfile.objects.get(telegram_id=chat_id)
        user_context[chat_id]['user'] = user
        if date == "–ù–µ–≥–∞–π–Ω–æ":
            user_context[chat_id]['date'] = "–ù–µ–≥–∞–π–Ω–æ"
        else:
            user_context[chat_id]['date'] = user_input
        user_context[chat_id]['product'] = product
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton("–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é", request_location=True))
        markup.add(KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç–∏"))
        bot.send_message(chat_id, "–í–∫–∞–∂—ñ—Ç—å —Å–ø–æ—Å—ñ–± –≤–∫–∞–∑–∞–Ω–Ω—è –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è:", reply_markup=markup)

    except Exception as e:
        bot.send_message(chat_id, f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")


@bot.message_handler(func=lambda message: message.text == "–ù–∞–ø–∏—Å–∞—Ç–∏")
def write_location(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è")
    bot.register_next_step_handler(message, save_order_location_text)


@bot.message_handler(content_types=['location'])
def save_order_location(message):
    chat_id = message.chat.id
    location = message.location
    try:
        latitude = location.latitude
        longitude = location.longitude
        location_text = f"{latitude}, {longitude}"
        user = user_context[chat_id]['user']
        date = user_context[chat_id]['date']
        product = user_context[chat_id]['product']
        user_context[chat_id]['location'] = location_text
        order = Order.objects.create(user=user, product=product, date=date, location=location_text)
        order.save()

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton("–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True))
        markup.add(KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç–∏ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ"))
        bot.send_message(chat_id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ:", reply_markup=markup)
    except Exception as e:
        bot.send_message(chat_id, f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")


def save_order_location_text(message):
    chat_id = message.chat.id
    location = message.text
    try:
        user = user_context[chat_id]['user']
        date = user_context[chat_id]['date']
        product = user_context[chat_id]['product']
        user_context[chat_id]['location'] = location
        order = Order.objects.create(user=user, product=product, date=date, location=location)
        order.save()
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton("–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True))
        markup.add(KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç–∏ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ"))
        bot.send_message(chat_id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ:", reply_markup=markup)
    except Exception as e:
        bot.send_message(chat_id, f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")


@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    chat_id = message.chat.id
    contact = message.contact
    try:
        if "step" in user_context.get(chat_id, {}) and user_context[chat_id]["step"] == "order_service":
            save_order_contact(message, chat_id, contact.phone_number)
        else:
            save_question_contact(message, chat_id, contact)
    except Exception as e:
        bot.send_message(chat_id, f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")


def save_order_contact(message, chat_id, contact_info):
    user = user_context[chat_id]['user']
    date = user_context[chat_id]['date']
    product = user_context[chat_id]['product']
    location = user_context[chat_id]['location']
    order = Order.objects.filter(user=user, product=product, date=date, location=location).last()
    order.contact = contact_info
    order.save()
    send_order(message, chat_id, order.product, order.date, order.location, contact_info)


def save_question_contact(message, chat_id, contact):
    try:
        user_profile = UserProfile.objects.get(telegram_id=chat_id)
        question = contact.phone_number
        question_obj = Question.objects.create(user=user_profile, question=question)
        send_question(message, chat_id, question_obj.question)
    except Exception as e:
        bot.send_message(chat_id, f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")


@bot.message_handler(func=lambda message: message.text == "–ù–∞–ø–∏—Å–∞—Ç–∏ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ")
def write_contact(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ")
    bot.register_next_step_handler(message, save_orders_contact)


def save_orders_contact(message):
    chat_id = message.chat.id
    contact_info = message.text
    try:
        user = user_context[chat_id]['user']
        date = user_context[chat_id]['date']
        product = user_context[chat_id]['product']
        location = user_context[chat_id]['location']
        order = Order.objects.filter(user=user, product=product, date=date, location=location).last()
        order.contact = contact_info
        order.save()
        send_order(message, chat_id, order.product, order.date, order.location, contact_info)
    except Exception as e:
        bot.send_message(chat_id, f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")


def clear_user_context(chat_id):
    if chat_id in user_context:
        del user_context[chat_id]


def send_order(message, chat_id, product, date, location, contact_info):
    try:
        caption = f"‚ùó –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚ùó\n"
        user = UserProfile.objects.get(telegram_id=chat_id)
        caption += f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.username}\nü§ñ ID: {user.telegram_id}\n"
        caption += f"üì¶ –ü–æ—Å–ª—É–≥–∞: {product}\n"
        caption += f"üï∞ –ß–∞—Å: {date}\n"
        caption += f"üìå –õ–æ–∫–∞—Ü—ñ—è: {location}\n"
        caption += f"üì± –ö–æ–Ω—Ç–∞–∫—Ç–∏: {contact_info}\n"

        channel_id = -1002005268131
        bot.send_message(channel_id, caption)

        bot.send_message(chat_id, '–î—è–∫—É—é, –¥–æ 10 —Ö–≤–∏–ª–∏–Ω –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤\'—è–∂–µ—Ç—å—Å—è –∑ –í–∞–º–∏!')
        start(message)
        clear_user_context(chat_id)
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")


@bot.message_handler(func=lambda message: message.text == "üìÑ –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å üìÑ")
def order_history(message):
    chat_id = message.chat.id
    display_order_history(chat_id)


def display_order_history(chat_id):
    try:
        orders = Order.objects.filter(user__telegram_id=chat_id)
        if orders:
            message = "–í–∞—à–∞ —ñ—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å:\n\n"
            for order in orders:
                message += f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}:\n"
                message += f"–ü–æ—Å–ª—É–≥–∞: {order.product}\n"
                message += f"–î–∞—Ç–∞: {order.date}\n"
                message += f"–ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è: {order.location}\n"
                message += f"–ö–æ–Ω—Ç–∞–∫—Ç: {order.contact}\n\n"
            bot.send_message(chat_id, message)
        else:
            bot.send_message(chat_id, "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.")
    except Exception as e:
        bot.send_message(chat_id, f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")


@bot.message_handler(func=lambda message: message.text == "ü•á –ü–µ—Ä–µ–≤–∞–≥–∏")
def display_preferences(message):
    chat_id = message.chat.id
    try:
        preferences = Preference.objects.all()
        if preferences:
            preference_text = ""
            for preference in preferences:
                preference_text += f"{preference.preference}\n"
            bot.send_message(chat_id, preference_text)
        else:
            bot.send_message(chat_id, "–ù–∞ –∂–∞–ª—å, –ø–µ—Ä–µ–≤–∞–≥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        bot.send_message(chat_id, f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")


@bot.message_handler(func=lambda message: message.text == "–ö–æ–Ω—Ç–∞–∫—Ç–∏ üì≤")
def contacts(message):
    contacts = Contacts.objects.all()
    for contact in contacts:
        message_text = f"{contact.text}\n"
        inline_markup = types.InlineKeyboardMarkup()
        links = ContactsLink.objects.filter(contact=contact)
        for link in links:
            inline_btn = types.InlineKeyboardButton(text=link.name, url=link.links)
            inline_markup.add(inline_btn)
        bot.send_message(message.chat.id, message_text, reply_markup=inline_markup)


@bot.message_handler(func=lambda message: message.text == "üë©‚Äçüíª –ó–≤\'—è–∑–∞—Ç–∏—Å—å –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º üë©‚Äçüíª")
def question(message):
    chat_id = message.chat.id
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    markup.add(KeyboardButton("–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏", request_contact=True))
    markup.add(KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏"))
    bot.send_message(chat_id, "–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ, –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤\'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏")
def write_contact(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ")
    bot.register_next_step_handler(message, save_contact)


def save_contact(message):
    chat_id = message.chat.id
    user_profile = UserProfile.objects.get(telegram_id=chat_id)
    questions = message.text
    contact_obj = Question.objects.create(user=user_profile, question=questions)
    send_question(message, chat_id, contact_obj.question)


def send_question(message, chat_id, question):
    try:
        caption = f"‚ùó –ó–∞–ø–∏—Ç–∞–Ω–Ω—è ‚ùó\n"
        user = UserProfile.objects.get(telegram_id=chat_id)
        caption += f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.username}\nü§ñ ID: {user.telegram_id}\n"
        caption += f"üîç –ù–æ–º–µ—Ä: {question}\n"

        channel_id = -1002005268131
        bot.send_message(channel_id, caption)

        bot.send_message(chat_id, '–î—è–∫—É—é, –¥–æ 10 —Ö–≤–∏–ª–∏–Ω –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤\'—è–∂–µ—Ç—å—Å—è –∑ –í–∞–º–∏!')
        start(message)
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
